---
import Layout from "../layouts/Layout.astro";
import projectImg1 from "../assets/euphoria.webp?url";
import projectImg2 from "../assets/livon.webp?url";
import projectImg3 from "../assets/petals.webp?url";
import ProjectCard from "../components/ProjectCard.astro";
---

<Layout>
  <section class="pt-6 md:pt-10">
    <div class="container mx-auto px-4 md:px-6 flex flex-col gap-6 md:gap-0">
      <h1
        class="text-h4 md:text-d2 leading-tight md:leading-[78px] font-semibold text-primary"
      >
        Projects
      </h1>
      <!-- <div class="mt-2 md:mt-6">
        <InsightsFilters categories={INSIGHT_CATEGORIES} />
      </div> -->

      <div class="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6 mt-6 md:mt-10">
        <div>
          <ProjectCard
            title="Euphoria Accra"
            subtitle="View projects"
            imageSrc={projectImg1}
            href="/projects"
          />
        </div>
        <div>
          <ProjectCard
            title="Livon Health"
            subtitle="Coming soon"
            imageSrc={projectImg2}
          />
        </div>
        <div>
          <ProjectCard
            title="New Development"
            subtitle="Coming soon"
            imageSrc={projectImg3}
          />
        </div>
      </div>
    </div>
  </section>
</Layout>

<script is:inline>
  const buttons = Array.from(document.querySelectorAll("[data-category]"));
  const searchInput = document.querySelector('input[type="search"]');
  const grid = document.querySelector("[data-insights-grid]");

  function normalize(text) {
    return (text || "").toLowerCase();
  }

  function applyFilters() {
    const activeButton = buttons.find(
      (b) => b.getAttribute("data-active") === "true"
    );
    const activeCategory = activeButton
      ? activeButton.getAttribute("data-category")
      : "All";
    const query = normalize(searchInput?.value || "");

    const items = Array.from(grid?.children || []);
    items.forEach((el) => {
      const title = normalize(el.getAttribute("data-title") || "");
      const category = el.getAttribute("data-tag") || "";
      const matchesCategory =
        activeCategory === "All" || category === activeCategory;
      const matchesQuery = query.length === 0 || title.includes(query);
      el.toggleAttribute("hidden", !(matchesCategory && matchesQuery));
    });
  }

  buttons.forEach((btn) => {
    btn.addEventListener("click", () => {
      buttons.forEach((b) => b.setAttribute("data-active", "false"));
      btn.setAttribute("data-active", "true");
      applyFilters();
    });
  });

  searchInput?.addEventListener("input", () => applyFilters());
</script>
