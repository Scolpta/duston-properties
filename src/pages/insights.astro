---
import Layout from "../layouts/Layout.astro";
import FeaturedInsight from "../components/FeaturedInsight.astro";
import InsightTile from "../components/InsightTile.astro";
import InsightsFilters from "../components/InsightsFilters.astro";
import {
  fetchInsights,
  INSIGHT_CATEGORIES,
  type InsightItem,
} from "../lib/insights";

const insights = (await fetchInsights()) as InsightItem[];
const [featured, ...rest] = insights;
---

<Layout>
  <section class="pt-10">
    <div class="container mx-auto flex justify-between">
      <h1 class="text-d2 leading-[78px] font-semibold text-primary">
        Insights
      </h1>
      <div class="mt-6">
        <InsightsFilters categories={INSIGHT_CATEGORIES} />
      </div>
    </div>
  </section>

  <section class="py-10">
    <div class="container mx-auto">
      <FeaturedInsight
        tag="Sustainability"
        readTime={featured.readTime}
        title={featured.title}
        excerpt={featured.excerpt}
        imageSrc={"https://images.unsplash.com/photo-1494526585095-c41746248156?q=80&w=1200&auto=format&fit=crop"}
      />
    </div>
  </section>

  <section class="pb-20">
    <div
      class="container mx-auto grid grid-cols-1 md:grid-cols-2 gap-10"
      data-insights-grid
    >
      {
        rest.map((item) => (
          <div data-tag={item.category} data-title={item.title}>
            <InsightTile
              tag={item.category}
              readTime={item.readTime}
              title={item.title}
              imageSrc={item.imageSrc}
            />
          </div>
        ))
      }
    </div>
  </section>

  <script is:inline>
    const buttons = Array.from(document.querySelectorAll("[data-category]"));
    const searchInput = document.querySelector('input[type="search"]');
    const grid = document.querySelector("[data-insights-grid]");

    function normalize(text) {
      return (text || "").toLowerCase();
    }

    function applyFilters() {
      const activeButton = buttons.find(
        (b) => b.getAttribute("data-active") === "true"
      );
      const activeCategory = activeButton
        ? activeButton.getAttribute("data-category")
        : "All";
      const query = normalize(searchInput?.value || "");

      const items = Array.from(grid?.children || []);
      items.forEach((el) => {
        const title = normalize(el.getAttribute("data-title") || "");
        const category = el.getAttribute("data-tag") || "";
        const matchesCategory =
          activeCategory === "All" || category === activeCategory;
        const matchesQuery = query.length === 0 || title.includes(query);
        el.toggleAttribute("hidden", !(matchesCategory && matchesQuery));
      });
    }

    buttons.forEach((btn) => {
      btn.addEventListener("click", () => {
        buttons.forEach((b) => b.setAttribute("data-active", "false"));
        btn.setAttribute("data-active", "true");
        applyFilters();
      });
    });

    searchInput?.addEventListener("input", () => applyFilters());
  </script>
</Layout>
